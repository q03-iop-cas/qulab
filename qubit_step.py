# -*- coding: utf-8 -*-
from qulab import open_lab
import os, sys
import time, datetime
import numpy as np
import logging
from scipy.interpolate import interp1d

Lab = open_lab()

class SQUID_Bais():
    def __init__(self):
        self.t = np.array([0,4.6,   5,   8,   9, 9.5,  10])
        self.y = np.array([0,  0, 1.5, 2.1,  -1,   0,   0])

    def gen(self, n):
        t = np.linspace(0,1,n+1)
        x = (self.t-self.t[0])/(self.t[-1]-self.t[0])
        return interp1d(x, self.y)(t[:-1])

    def set_zero(self, v):
        for i in [0, 1, 5, 6]:
            self.y[i] = v

wav = SQUID_Bais()

logger = logging.getLogger('main')

logger.info('QubitStep Start')

Lab.open_instr('counter', 'GPIB1::13')
Lab.instr['counter'].set_timeout(25)
Lab.open_instr('squid_sour', 'GPIB1::20')
#Lab.instr['squid_sour'].setValue('Waveform', value=wav.gen(2000))
#Lab.instr['squid_sour'].setValue('Frequency', 4e3)
Lab.open_instr('bais_sour', 'GPIB1::11')
Lab.instr['bais_sour'].DC(0)
time.sleep(2)


from qulab.utils import get_threshold

n = 5000
vRange = np.arange(-0.42,-0.4, 0.01)

header = '''{datatype} --- generated by {program} {version} <{time}>

Flux Bais Range : from {Fstart} to {Fstop} step {Fstep}
Points for Every Bais : {npoints}

+-----------+-------------+
| Flux Bais | Switch Time |
+-----------+-------------+
| V         | s           |
+-----------+-------------+
'''.format(
    datatype = 'QubitStep',
    program = sys.argv[0],
    version = 'v0.1',
    time = datetime.datetime.now(),
    Fstart = vRange[0],
    Fstop  = vRange[-1],
    Fstep  = vRange[1]-vRange[0],
    npoints = n
)

x = []
y = []
for v in vRange:
    Lab.instr['bais_sour'].setValue('Offset', v)
    #print(v)
    time.sleep(0.01)
    data = np.array(Lab.instr['counter'].getValue('Datas', count=n))
    threshold = get_threshold(data)
    P = 1.0*len(data[data > threshold])/len(data)
    print('Flux : %f V, Probility : %f' % (v, P))
    x.extend([v for i in range(n)])
    y.extend(list(data))

import numpy as np
import matplotlib.pyplot as plt

x = np.array(x)
y = np.array(y)

Lab.savetxt('QubitStep', np.array([x,y]).T, header=header)
logger.info('QubitStep Finished')

x = x[(y > 0.00001) * (y < 0.0002)]
y = y[(y > 0.00001) * (y < 0.0002)]

plt.hist2d(x, y, bins=[len(vRange),201])
plt.show()
